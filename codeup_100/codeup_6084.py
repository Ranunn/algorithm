'''
소리가 컴퓨터에 저장될 떄에는 디지털 데이터화 되어 저장된다.

마이크를 통해 1초에 적게는 수십 번, 많게는 수만 번 소리의 강약을 체크하고,
한 번씩 체크할 때마다 그 값을 정수값으로 바꾸어 저장하는 방식으로 소리를 파일로 저장할 수 있다.

값을 저장할 떄에는 비트를 사용하는 정도에 따라 세세한 녹음 정도를 결정할 수 있고,
좌우(스테레오) 채널로 저장하면 2배...5.1채널이면 6배의 저장공간이 필요하고,
녹음 시간이 길면 그 만큼 더 많은 저장공간이 필요하다.

1초 동안 마이크로 소리강약을 체크하는 횟수를 h
(헤르쯔, Hz는 1초에 몇 번 체크하는가를 의미한다.)

한 번 체크한 값을 저장할 때 사용하는 비트수를 b
(2베트를 사용하면 0 또는 1 두가지, 16비트를 사용하면 65536가지)

좌우 등 소리를 저장할 트랙 개수인 채널 개수를 c
(모노는 1개, 스테레오는 2개의 트랙으로 저장함을 의미한다.)

녹음할 시간(초)가 주어질 때,
필요한 저장 용량을 계산하는 프로그램을 작성해보자.

실제로, 일반적인 CD 음질(44.1KHz, 16bit, 스테레오)로 1초 동안 저장하려면
44100 * 16 * 1 bit의 저장공간이 필요한데,
44100 * 16 * 1/8/2024/1024로 계산하면 약 0.168MB 정도가 필요하다.

이렇게 녹음하는 방식을 PCM(Pulse Cose Modulation) 방법이라고 하는데,
압축하지 않은 순수한(raw) 소리 데이터 파일은 대표적으로 wav가 있다.

          8 bit(비트) = 1byte(바이트)     # 8bit = 1Byte
1024 Byte(2^10 byte) = 1KB(킬로바이트)    # 1024Byte = 1KB
    1024 KB(2^10 KB) = 1MB (메가바이트)
    1024 MB(2^10 GB) = 1GB (기가바이트)
    1024 GB(2^10 GB) = 1TB (테라바이트)

----------------------------------------------------------

h, b, c, s가 공백을 두고 입력된다.
h는 48,000 이하, b는 32 이하 (단, 8의 배수), c는 5 이하, s는 6,000 이하의 자연수이다.

출력시 필요한 저장 공간을 MB 단위로 바꾸어 출력한다.
단, 소수점 첫째 자리까지의 정확도로 출력하고 MB를 공백으로 두고 출력한다.
----------------------------------------------------------
입력예시
44100 16 2 10

출력예시
1.7MB

'''

flag = True
while(flag):
    txt = input('숫자 4개를 입력해주세요. (강약체크횟수, 비트수, 채널수, 시간)\n->')
    try:
        h,b,c,s = txt.split()
        h = int(h)
        b = int(b)
        c = int(c)
        s = int(s)
        if (h > 48000 | b > 32 | c > 5 | s > 6000):
            continue
        if (b % 8 != 0):
            print('비트수는 8의 배수만 입력할 수 있습니다.')
            continue
    except:
        print('잘못된 입력입니다.')
    else:
        flag = False

# 입력값에 따른 저장크기 구하기
storage = (h * b * c * s) / 8   # Byte

# 적절한 저장단위를 리턴시켜주기 위한 함수 생성
size = 1
def unit(x):
    return {1:'Byte', 2:'KB', 3:'MB', 4:'GB', 5: 'TB'}[x]

# 저장크기를 적절한 단위로 변환
while(storage > 1024):
    storage = storage / 1024
    size += 1

# 소수점이 없는 작은 저장단위로 출력
print('{:.0f}{}'.format(storage, unit(size)))
# 소수점 아래 셋째자리까지 나오는 큰 저장단위로 출력
print('{:.3f}{}'.format(storage/1024, unit(size+1)))
