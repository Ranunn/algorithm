
'''
한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다.
각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서
회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자.
단, 회의는 한 번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다.
회의의 시작시간과 끝나는 시간이 같을 수도 있다.
이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다.


...
입력)
첫째 줄에는 회의의 수 N(1 ≤ N ≤ 100,000)이 주어진다.
둘째 줄부터 N+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고
회의의 시작시간과 끝나는 시간이 주어진다.
시작 시간과 끝나는 시간은 2^31 - 1보다 작거나 같은 자연수 또는 0이다.

출력)
첫째 줄에 최대 사용할 수 있는 회의의 최대 개수를 출력한다.

...
입력 예시
11
1 4
3 5
0 6
5 7
3 8
5 9
6 10
8 11
8 12
2 13
12 14

출력 예시
4

'''


n = int(input())
meeting = []
for _ in range(n):
    # 2개의 입력값을 받아 2차원 리스트의 형태로 저장
    meeting.append(list(map(int, input().split())))
# 2차원 리스트의 두 번째 요소로 오름차순 정렬 후 첫 번째 요소로 다시 오름차순 정렬
# lambda 식을 사용하여 key에 해당하는 a를 지정해준다.
meeting.sort(key=lambda a: (a[1], a[0]))

# 비교
# meeting.sort()        # 리스트를 오름차순 정렬
# sorted(meeting, key=lambda a:a[0])    # 2차원 리스트의 첫번째 요소로 오름차순 정렬
# sorted(meeting, key=lambda a:a[1])    # 2차원 리스트의 두번째 요소로 오름차순 정렬

end = 0
cnt = 0
for i, j in meeting:
    # 이전 회의의 종료시간 기준으로 적합한 회의시작시간을 받아 회의의 개수를 1증가시킨다.
    if i >= end:
        cnt += 1
        # 추가 연산한 회의의 종료시간을 end 변수의 값으로 지정한다.
        end = j

# 회의의 최대 개수를 출력한다.
print(cnt)
